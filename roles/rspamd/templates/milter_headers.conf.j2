# Add "extended Rspamd headers" (default false) (enables x-spamd-result, x-rspamd-server & x-rspamd-queue-id routines)
#extended_spam_headers = true;

# Routines to use- this is the only required setting (may be omitted if using extended_spam_headers)
use = ["x-spamd-bar", "authentication-results", "x-spam-status", "x-mx"];

# List of routines to be enabled for authenticated users (default empty). See also skip_authenticated.
authenticated_headers = ["authentication-results"];

routines {
  x-spamd-bar {
    header = "X-Spamd-Bar";
    positive = "+";
    negative = "-";
    neutral = "/";
    remove = 0;
  }
  x-spamd-result {
    header = 'X-Spamd-Result';
    remove = 0;
  }
  authentication-results {
    # Name of header
    header = "Authentication-Results";
    # Remove existing headers
    remove = 1;
    # Set this false not to add SMTP usernames in authentication-results
    add_smtp_user = true;
    # SPF/DKIM/DMARC symbols in case these are redefined
    spf_symbols {
      pass = "R_SPF_ALLOW";
      fail = "R_SPF_FAIL";
      softfail = "R_SPF_SOFTFAIL";
      neutral = "R_SPF_NEUTRAL";
      temperror = "R_SPF_DNSFAIL";
      none = "R_SPF_NA";
      permerror = "R_SPF_PERMFAIL";
    }
    dkim_symbols {
      pass = "R_DKIM_ALLOW";
      fail = "R_DKIM_REJECT";
      temperror = "R_DKIM_TEMPFAIL";
      none = "R_DKIM_NA";
      permerror = "R_DKIM_PERMFAIL";
    }
    dmarc_symbols {
      pass = "DMARC_POLICY_ALLOW";
      permerror = "DMARC_BAD_POLICY";
      temperror = "DMARC_DNSFAIL";
      none = "DMARC_NA";
      reject = "DMARC_POLICY_REJECT";
      softfail = "DMARC_POLICY_SOFTFAIL";
      quarantine = "DMARC_POLICY_QUARANTINE";
    }
  }
  x-spam-status {
    header = "X-Spam-Status";
    remove = 0;
  }
}

custom {
  x-mx = <<EOD
  return function(task, common_meta)
    -- parameters are task and metadata from previous functions

    if task:has_symbol('MX_INVALID') then
      return nil, -- no error
      {['X-MX'] = 'INVALID'}, -- set extra header
      {['X-MX'] = 0}, -- remove foreign X-Foo headers
      {} -- metadata to return to other functions
    end
    if task:has_symbol('MX_MISSING') then
      return nil, -- no error
      {['X-MX'] = 'MISSING'}, -- set extra header
      {['X-MX'] = 0}, -- remove foreign X-Foo headers
      {} -- metadata to return to other functions
    end
    if task:has_symbol('MX_GOOD') then
      return nil, -- no error
      {['X-MX'] = 'GOOD'}, -- set extra header
      {['X-MX'] = 0}, -- remove foreign X-Foo headers
      {} -- metadata to return to other functions
    end

    return nil, -- no error
    {}, -- need to fill the parameter
    {['X-MX'] = 0}, -- remove foreign X-Foo headers
    {} -- metadata to return to other functions

  end
EOD;
}

