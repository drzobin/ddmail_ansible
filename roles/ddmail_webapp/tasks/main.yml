---
- name: Install packages needed for web application ddmail
  ansible.builtin.apt:
    pkg:
      - python3-pip
      - build-essential
      - libssl-dev
      - libffi-dev
      - python3-dev
      - python3-venv
      - pkg-config
      - default-libmysqlclient-dev
    state: latest

- name: Install screen in dev
  ansible.builtin.apt:
    pkg:
      - screen
    state: latest
  when: env == "dev"

- name: Stat /opt/ddmail_webapp folder
  ansible.builtin.stat:
    path: /opt/ddmail_webapp
  register: ddmail_webapp

- name: Move /opt/ddmail_webapp folder
  ansible.builtin.command: mv /opt/ddmail_webapp /opt/ddmail_webapp_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}
  when: ddmail_webapp.stat.exists

- name: Create /opt/ddmail_webapp if it does not exist
  ansible.builtin.file:
    path: /opt/ddmail_webapp
    state: directory
    owner: root
    group: root
    mode: "u=rwx,g=rx,o=rx"
  when: env == "prod"

- name: Create /opt/ddmail_webapp if it does not exist
  ansible.builtin.file:
    path: /opt/ddmail_webapp
    state: directory
    owner: '{{ ddmail_webapp_runas_user }}'
    group: '{{ ddmail_webapp_runas_group }}'
    mode: "u=rwx,g=rx,o=rx"
  when: env == "dev"

- name: Create ddmail python env.
  ansible.builtin.command: python3 -m venv /opt/ddmail_webapp/venv

- name: Add the group "{{ ddmail_webapp_runas_group }}"
  ansible.builtin.group:
    name: "{{ ddmail_webapp_runas_group }}"
    state: present
  when: env == "prod"

- name: Add the user "{{ ddmail_webapp_runas_user }}"
  ansible.builtin.user:
    name: "{{ ddmail_webapp_runas_user }}"
    shell: /usr/sbin/nologin
    home: /opt/ddmail_webapp_venv
    create_home: false
    group: "{{ ddmail_webapp_runas_group }}"
    state: present
  when: env == "prod"

- name: Clone ddmail_webapp repo with separate git directory
  ansible.builtin.git:
    repo: https://github.com/drzobin/ddmail_webapp.git
    dest: /opt/ddmail_webapp/ddmail_webapp
    single_branch: yes
    version: dev

- name: Install ddmail_webapp and requirenments with pip.
  ansible.builtin.pip:
    name: ddmail-webapp
    state: latest
    virtualenv_python: python3
    virtualenv: /opt/ddmail_webapp/venv
  when: env == "prod"

- name: Install ddmail_webapp and requirenments for development with pip.
  ansible.builtin.pip:
    name: .[dev]
    chdir: /opt/ddmail_webapp/ddmail_webapp
    state: latest
    virtualenv_python: python3
    virtualenv: /opt/ddmail_webapp/venv
  when: env == "dev"


- name: Set user and group ownership of /opt/ddmail_webapp
  ansible.builtin.file:
    state: directory
    recurse: true
    owner: "{{ ddmail_webapp_user_owner }}"
    group: "{{ ddmail_webapp_group_owner }}"
    path: /opt/ddmail_webapp

- name: Set git remote for ddmail_webapp
  ansible.builtin.shell: cd /opt/ddmail_webapp/ddmail_webapp; git remote set-url origin git@github.com:drzobin/ddmail_webapp.git
  become: true
  become_method: su
  become_user: "{{ ddmail_email_remover_runas_user }}"
  when: env == "dev"

- name: Create /opt/ddmail_webapp/config if it does not exist
  ansible.builtin.file:
    path: /opt/ddmail_webapp/config
    state: directory
    owner: "{{ ddmail_webapp_user_owner }}"
    group: "{{ ddmail_webapp_group_owner }}"
    mode: "u=rwx,g=rx,o=rx"

- name: Create/edit ddmail webapp config file /opt/ddmail_webapp/config/config.toml
  ansible.builtin.template:
    src: config.toml.j2
    dest: /opt/ddmail_webapp/config/config.toml
    owner: '{{ ddmail_webapp_runas_user }}'
    group: '{{ ddmail_webapp_runas_group }}'
    mode: "u=rw,g=r,o="

- name: Kill development server in screen.
  ansible.builtin.command: screen -X -S ddmail_webapp kill
  become: true
  become_method: su
  become_user: "{{ ddmail_webapp_runas_user }}"
  ignore_errors: true
  when: env == "dev"

- name: Create/edit ddmail_webapp startup script for development
  ansible.builtin.template:
    src: run_dev.sh.j2
    dest: /opt/ddmail_webapp/run_dev.sh
    owner: "{{ ddmail_webapp_runas_user }}"
    group: "{{ ddmail_webapp_runas_group }}"
    mode: "u=rwx,g=r,o=r"
  when: env == "dev"

- name: Add logdir for ddmail_webapp.
  ansible.builtin.file:
    path: /var/log/ddmail_webapp.log
    state: touch
    owner: '{{ ddmail_webapp_runas_user }}'
    group: '{{ ddmail_webapp_runas_group }}'
    mode: u=rw,g=r,o=


- name: Start development server in screen.
  ansible.builtin.command: screen -S ddmail_webapp -d -m bash -c "sleep 5; source /opt/ddmail_webapp/run_dev.sh; /bin/bash"
  become: true
  become_method: su
  become_user: "{{ ddmail_webapp_runas_user }}"

- name: Create/edit ddmail gunicorne service configuration file /etc/systemd/system/ddmail_webapp.service
  ansible.builtin.template:
    src: systemd_service.j2
    dest: /etc/systemd/system/ddmail_webapp.service
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
  when: env == "prod"

- name: Add logdir for gunicorn.
  ansible.builtin.file:
    path: /var/log/gunicorn
    state: directory
    owner: root
    group: root
    mode: "u=rwx,g=rx,o=rx"
  when: env == "prod"

- name: Add logfile /var/log/gunicorn/ddmail_webapp.log
  ansible.builtin.file:
    path: /var/log/gunicorn/ddmail_webapp.log
    state: touch
    owner: '{{ ddmail_webapp_runas_user }}'
    group: '{{ ddmail_webapp_runas_group }}'
    mode: u=rw,g=r,o=
  when: env == "prod"

- name: Stat tor onion service address file
  ansible.builtin.stat:
    path: /var/lib/tor/ddmail_http/hostname
  register: tor_hostname
  when: env == "prod"

- name: Copy tor onion service hostname file to ddmail_webapp templates folder.
  ansible.builtin.copy:
    remote_src: True
    src: /var/lib/tor/ddmail_http/hostname
    dest: /opt/ddmail_webapp_venv/ddmail/ddmail/templates/tor_hostname
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
  when:
    - env == "prod"
    - tor_hostname.stat.exists

- name: Stat i2p b32 address file
  ansible.builtin.stat:
    path: /var/lib/i2pd/ddmail_key.dat
  register: i2p_hostname
  when: env == "prod"

- name: Set i2p b32 address for ddmail_webapp
  ansible.builtin.shell: echo "$(head -c 391 /var/lib/i2pd/ddmail_key.dat | sha256sum | cut -f1 -d\  | xxd -r -p | base32 | tr '[:upper:]' '[:lower:]' | sed -r 's/=//g').b32.i2p" > /opt/ddmail_webapp_venv/ddmail/ddmail/templates/i2p_hostname
  when:
    - env == "prod"
    - i2p_hostname.stat.exists

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true

- name: Restart ddmail_webapp gunicorn service
  ansible.builtin.service:
    name: ddmail_webapp
    state: restarted
    enabled: true
  when: env == "prod"
